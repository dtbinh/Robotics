px = z2*(sin(t4)*(sin(t1)*sin(t3) - cos(t1)*cos(t3)*sin(t2)) + cos(t1)*cos(t2)*cos(t4)) - z1*cos(t1)*cos(t2)
 
py = y1 + z2*(cos(t4)*sin(t2) + cos(t2)*cos(t3)*sin(t4)) - z1*sin(t2) 

pz = - z2*(sin(t4)*(cos(t1)*sin(t3) + cos(t3)*sin(t1)*sin(t2)) - cos(t2)*cos(t4)*sin(t1)) - z1*cos(t2)*sin(t1)

ax = inverse_tan(  
-(sin(t5)*(cos(t4)*(cos(t1)*sin(t3) + cos(t3)*sin(t1)*sin(t2)) + cos(t2)*sin(t1)*sin(t4)) + cos(t5)*(cos(t1)*cos(t3) - sin(t1)*sin(t2)*sin(t3)))/(sin(t4)*(cos(t1)*sin(t3) + cos(t3)*sin(t1)*sin(t2)) - cos(t2)*cos(t4)*sin(t1)))
 
ay = inverse_tan( 
(cos(t5)*(cos(t4)*(cos(t1)*sin(t3) + cos(t3)*sin(t1)*sin(t2)) + cos(t2)*sin(t1)*sin(t4)) - sin(t5)*(cos(t1)*cos(t3) - sin(t1)*sin(t2)*sin(t3)))/((sin(t4)*(cos(t1)*sin(t3) + cos(t3)*sin(t1)*sin(t2)) - cos(t2)*cos(t4)*sin(t1))^2 + (sin(t5)*(cos(t4)*(cos(t1)*sin(t3) + cos(t3)*sin(t1)*sin(t2)) + cos(t2)*sin(t1)*sin(t4)) + cos(t5)*(cos(t1)*cos(t3) - sin(t1)*sin(t2)*sin(t3)))^2)^(1/2))

az = inverse_tan(
-(cos(t5)*(sin(t2)*sin(t4) - cos(t2)*cos(t3)*cos(t4)) - cos(t2)*sin(t3)*sin(t5))/(cos(t5)*(cos(t4)*(sin(t1)*sin(t3) - cos(t1)*cos(t3)*sin(t2)) - cos(t1)*cos(t2)*sin(t4)) - sin(t5)*(cos(t3)*sin(t1) + cos(t1)*sin(t2)*sin(t3))))

//TODO:
//- make a list of all features that appear (e.g. cos(t2)*cos(t3)*cos(t4), sin(t2)*sin(t4), etc)
//- in training data, take the tangent of (ax, ay, az) to simplify


//- (ax, az) are pretty easy and nice, aside from division... can we use them to form ay?
//- or should we break up (ax,ay,az) components into T(2,1) etc and then figure out how to map those to the sqrt, divide, etc? 


///////// decided the below doesn't really help simplify things

(k,theta) representation:

theta = inverse_cos((cos(t5)*(cos(t4)*(sin(t1)*sin(t3) - cos(t1)*cos(t3)*sin(t2)) - cos(t1)*cos(t2)*sin(t4)))/2 + (sin(t5)*(sin(t2)*sin(t4) - cos(t2)*cos(t3)*cos(t4)))/2 - (sin(t4)*(cos(t1)*sin(t3) + cos(t3)*sin(t1)*sin(t2)))/2 - (sin(t5)*(cos(t3)*sin(t1) + cos(t1)*sin(t2)*sin(t3)))/2 + (cos(t2)*cos(t4)*sin(t1))/2 + (cos(t2)*cos(t5)*sin(t3))/2 - 1/2)

2*sin(theta)*k =                                     
[ sin(t5)*(cos(t4)*(cos(t1)*sin(t3) + cos(t3)*sin(t1)*sin(t2)) + cos(t2)*sin(t1)*sin(t4)) - cos(t4)*sin(t2) + cos(t5)*(cos(t1)*cos(t3) - sin(t1)*sin(t2)*sin(t3)) - cos(t2)*cos(t3)*sin(t4)
 cos(t5)*(cos(t4)*(cos(t1)*sin(t3) + cos(t3)*sin(t1)*sin(t2)) + cos(t2)*sin(t1)*sin(t4)) + sin(t4)*(sin(t1)*sin(t3) - cos(t1)*cos(t3)*sin(t2)) - sin(t5)*(cos(t1)*cos(t3) - sin(t1)*sin(t2)*sin(t3)) + cos(t1)*cos(t2)*cos(t4)
 sin(t5)*(cos(t4)*(sin(t1)*sin(t3) - cos(t1)*cos(t3)*sin(t2)) - cos(t1)*cos(t2)*sin(t4)) - cos(t5)*(sin(t2)*sin(t4) - cos(t2)*cos(t3)*cos(t4)) + cos(t5)*(cos(t3)*sin(t1) + cos(t1)*sin(t2)*sin(t3)) + cos(t2)*sin(t3)*sin(t5)  ]

Making life less terrible: is there some way we can compute ay from (ax, az)? Because that expression is terrible. 
OR: find a better parameterization of the angles (e.g. R[ZYZ] looks a bit better)

IDEA: use axis-angle (really simple to get theta, axis k) then convert to the above!